
// Params for width and height
const uint8_t kMatrixWidth = 24;
const uint8_t kMatrixHeight = 24;

#define NUM_LEDS (kMatrixWidth * kMatrixHeight)
CRGB leds[ NUM_LEDS ];
#define LAST_VISIBLE_LED 575
uint16_t XY (uint16_t x, uint16_t y) {
  // any out of bounds address maps to the first hidden pixel
  if ( (x >= kMatrixWidth) || (y >= kMatrixHeight) ) {
    return (LAST_VISIBLE_LED + 1);
  }
  const uint16_t XYTable[] = {
  440, 441, 442, 443, 444, 445, 446, 447,    504, 505, 506, 507, 508, 509, 510, 511,   568, 569, 570, 571, 572, 573, 574, 575,
  439, 438, 437, 436, 435, 434, 433, 432,    503, 502, 501, 500, 499, 498, 497, 496,   567, 566, 565, 564, 563, 562, 561, 560,
  424, 425, 426, 427, 428, 429, 430, 431,    488, 489, 490, 491, 492, 493, 494, 495,   552, 553, 554, 555, 556, 557, 558, 559,
  423, 422, 421, 420, 419, 418, 417, 416,    487, 486, 485, 484, 483, 482, 481, 480,   551, 550, 549, 548, 547, 546, 545, 544,
  408, 409, 410, 411, 412, 413, 414, 415,    472, 473, 474, 475, 476, 477, 478, 479,   536, 537, 538, 539, 540, 541, 542, 543,
  407, 406, 405, 404, 403, 402, 401, 400,    471, 470, 469, 468, 467, 466, 465, 464,   535, 534, 533, 532, 531, 530, 529, 528,
  392, 393, 394, 395, 396, 397, 398, 399,    456, 457, 458, 459, 460, 461, 462, 463,   520, 521, 522, 523, 524, 525, 526, 527,
  391, 390, 389, 388, 387, 386, 385, 384,    455, 454, 453, 452, 451, 450, 449, 448,   519, 518, 517, 516, 515, 514, 513, 512,
    
  248, 249, 250, 251, 252, 253, 254, 255,    312, 313, 314, 315, 316, 317, 318, 319,   376, 377, 378, 379, 380, 381, 382, 383,       
  247, 246, 245, 244, 243, 242, 241, 240,    311, 310, 309, 308, 307, 306, 305, 304,   375, 374, 373, 372, 371, 370, 369, 368,        
  232, 233, 234, 235, 236, 237, 238, 239,    296, 297, 298, 299, 300, 301, 302, 303,   360, 361, 362, 363, 364, 365, 366, 367,       
  231, 230, 229, 228, 227, 226, 225, 224,    295, 294, 293, 292, 291, 290, 289, 288,   359, 358, 357, 356, 355, 354, 353, 352,        
  216, 217, 218, 219, 220, 221, 222, 223,    280, 281, 282, 283, 284, 285, 286, 287,   344, 345, 346, 347, 348, 349, 350, 351,       
  215, 214, 213, 212, 211, 210, 209, 208,    279, 278, 277, 276, 275, 274, 273, 272,   343, 342, 341, 340, 339, 338, 337, 336,         
  200, 201, 202, 203, 204, 205, 206, 207,    264, 265, 266, 267, 268, 269, 270, 271,   328, 329, 330, 331, 332, 333, 334, 335,       
  199, 198, 197, 196, 195, 194, 193, 192,    263, 262, 261, 260, 259, 258, 257, 256,   327, 326, 325, 324, 323, 322, 321, 320,        
   
    56,  57,  58,  59,  60,  61,  62,  63,    120, 121, 122, 123, 124, 125, 126, 127,   184, 185, 186, 187, 188, 189, 190, 191,   
    55,  54,  53,  52,  51,  50,  49,  48,    119, 118, 117, 116, 115, 114, 113, 112,   183, 182, 181, 180, 179, 178, 177, 176,   
    40,  41,  42,  43,  44,  45,  46,  47,    104, 105, 106, 107, 108, 109, 110, 111,   168, 169, 170, 171, 172, 173, 174, 175,   
    39,  38,  37,  36,  35,  34,  33,  32,    103, 102, 101, 100,  99,  98,  97,  96,   167, 166, 165, 164, 163, 162, 161, 160,   
    24,  25,  26,  27,  28,  29,  30,  31,    88,  89,  90,  91,  92,  93,  94,  95,    152, 153, 154, 155, 156, 157, 158, 159,   
    23,  22,  21,  20,  19,  18,  17,  16,    87,  86,  85,  84,  83,  82,  81,  80,    151, 150, 149, 148, 147, 146, 145, 144,   
     8,   9,  10,  11,  12,  13,  14,  15,    72,  73,  74,  75,  76,  77,  78,  79,    136, 137, 138, 139, 140, 141, 142, 143,   
     7,   6,   5,   4,   3,   2,   1,   0,    71,  70,  69,  68,  67,  66,  65,  64,    135, 134, 133, 132, 131, 130, 129, 128,   
  };
  uint16_t i = (y * kMatrixWidth) + x;
  uint16_t j = XYTable[i];
  return j;
}
