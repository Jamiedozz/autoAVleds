
// Params for width and height
const uint8_t kMatrixWidth = 24;
const uint8_t kMatrixHeight = 16;

#define NUM_LEDS (kMatrixWidth * kMatrixHeight)
CRGB leds[ NUM_LEDS ];
#define LAST_VISIBLE_LED 383
uint16_t XY (uint16_t x, uint16_t y) {
  // any out of bounds address maps to the first hidden pixel
  if ( (x >= kMatrixWidth) || (y >= kMatrixHeight) ) {
    return (LAST_VISIBLE_LED + 1);
  }
  const uint16_t XYTable[] = {
  376, 377, 378, 379, 380, 381, 382, 383,    312, 313, 314, 315, 316, 317, 318, 319,    248, 249, 250, 251, 252, 253, 254, 255,
  375, 374, 373, 372, 371, 370, 369, 368,    311, 310, 309, 308, 307, 306, 305, 304,    247, 246, 245, 244, 243, 242, 241, 240,
  360, 361, 362, 363, 364, 365, 366, 367,    296, 297, 298, 299, 300, 301, 302, 303,    232, 233, 234, 235, 236, 237, 238, 239,
  359, 358, 357, 356, 355, 354, 353, 352,    295, 294, 293, 292, 291, 290, 289, 288,    231, 230, 229, 228, 227, 226, 225, 224,
  344, 345, 346, 347, 348, 349, 350, 351,    280, 281, 282, 283, 284, 285, 286, 287,    216, 217, 218, 219, 220, 221, 222, 223,
  343, 342, 341, 340, 339, 338, 337, 336,    279, 278, 277, 276, 275, 274, 273, 272,    215, 214, 213, 212, 211, 210, 209, 208,
  328, 329, 330, 331, 332, 333, 334, 335,    264, 265, 266, 267, 268, 269, 270, 271,    200, 201, 202, 203, 204, 205, 206, 207,
  327, 326, 325, 324, 323, 322, 321, 320,    263, 262, 261, 260, 259, 258, 257, 256,    199, 198, 197, 196, 195, 194, 193, 192,
   
    56,  57,  58,  59,  60,  61,  62,  63,    120, 121, 122, 123, 124, 125, 126, 127,   184, 185, 186, 187, 188, 189, 190, 191,   // 248, 249, 250, 251, 252, 253, 254, 255,
    55,  54,  53,  52,  51,  50,  49,  48,    119, 118, 117, 116, 115, 114, 113, 112,   183, 182, 181, 180, 179, 178, 177, 176,   // 247, 246, 245, 244, 243, 242, 241, 240,
    40,  41,  42,  43,  44,  45,  46,  47,    104, 105, 106, 107, 108, 109, 110, 111,   168, 169, 170, 171, 172, 173, 174, 175,   // 232, 233, 234, 235, 236, 237, 238, 239,
    39,  38,  37,  36,  35,  34,  33,  32,    103, 102, 101, 100,  99,  98,  97,  96,   167, 166, 165, 164, 163, 162, 161, 160,   // 231, 230, 229, 228, 227, 226, 225, 224,
    24,  25,  26,  27,  28,  29,  30,  31,    88,  89,  90,  91,  92,  93,  94,  95,    152, 153, 154, 155, 156, 157, 158, 159,   // 216, 217, 218, 219, 220, 221, 222, 223,
    23,  22,  21,  20,  19,  18,  17,  16,    87,  86,  85,  84,  83,  82,  81,  80,    151, 150, 149, 148, 147, 146, 145, 144,   // 215, 214, 213, 212, 211, 210, 209, 208,
     8,   9,  10,  11,  12,  13,  14,  15,    72,  73,  74,  75,  76,  77,  78,  79,    136, 137, 138, 139, 140, 141, 142, 143,   // 200, 201, 202, 203, 204, 205, 206, 207,
     7,   6,   5,   4,   3,   2,   1,   0,    71,  70,  69,  68,  67,  66,  65,  64,    135, 134, 133, 132, 131, 130, 129, 128,   // 199, 198, 197, 196, 195, 194, 193, 192, 
  };
  uint16_t i = (y * kMatrixWidth) + x;
  uint16_t j = XYTable[i];
  return j;
}
